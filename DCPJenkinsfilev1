def repoName
def repoURL
def branchName
pipeline {
  agent any
  tools {
  nodejs "NODE"
  maven "maven3.6.3"
  }
  environment {
        buildnumber = "${BUILD_NUMBER}"
        jobName    = "${env.JOB_NAME}"
        
        
    }
  stages{
     
   
    

       
         


        
    
       
    
  
	
     stage('Test') {
	 steps{
	 script{
	 repoName = determineRepoName()
         branchName = getGitBranchName() 
         repoURL = determineRepoURL()
         valuesYaml = loadValuesYaml()
	 }
         sh ' rm -rf *.properties'
                sh "echo apiVersion=${valuesYaml.apiVersion} >> variable.properties"
                sh "echo label=${valuesYaml.metadata.labels.name} >> variable.properties"
         sh "echo jobName=${env.JOB_NAME} >> variable.properties"
sh "echo buildNumber=${env.BUILD_NUMBER} >> variable.properties"
sh "echo repoName=$repoName >> variable.properties"
sh "echo branchName=$branchName >> variable.properties"
sh "echo repoURL=$repoURL >> variable.properties"
sh "echo commitId=${env.GIT_COMMIT} >> variable.properties"
/*sh "echo BlackDuckProject=Canada-Application >> variable.properties"
sh "echo BlackDuckVersion=${env.BUILD_NUMBER} >> variable.properties"
sh "echo ApplicationName=PetClinicDemoNexus >> variable.properties"
sh "echo ApplicationProcess=DeployApplication >> variable.properties"*/



    }
     }
     
    
}
  
    post {
        always {
            
            archiveArtifacts artifacts: "variable.properties"
        }
    } 

}



String determineRepoName() {
    return scm.getUserRemoteConfigs()[0].getUrl().tokenize('/')[3].split("\\.")[0]
}
String determineRepoURL() {
    return scm.getUserRemoteConfigs()[0].getUrl()
}
String getGitBranchName() {
    return scm.branches[0].name.tokenize("*")[0].split("\\/")[1]
}
def loadValuesYaml(){
  def valuesYaml = readYaml (file: './metadata.yaml')
  return valuesYaml;
}
